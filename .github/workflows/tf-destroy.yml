name: 'Terraform destroy'

on:
  workflow_dispatch:

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  tf_actions_working_dir: .terraform 
  STATEFILENAME: github-worker.tfstate
  STATE_RG_NAME: ${{ vars.STATE_RG_NAME }}
  STATE_SA_NAME: ${{ vars.STATE_SA_NAME }}
  TF_VAR_org_name: "2good4hisowngood"
  TF_VAR_image_name: ${{ vars.ACR_IMAGE }}
  TF_VAR_acr_server: ${{ vars.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
  TF_VAR_acr_username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
  TF_VAR_acr_password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
  TF_VAR_acr_rg: ${{ vars.STATE_RG_NAME }}
  TF_VAR_token: ${{ secrets.RUNNER_TOKEN }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true      
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -destroy -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
      # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ./${{ env.tf_actions_working_dir }}
        


  terraform-destroy:
    name: 'Terraform Destroy'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ./${{ env.tf_actions_working_dir }}

    # Terraform Destroy
    - name: Terraform Destroy
      run: terraform apply -auto-approve tfplan
