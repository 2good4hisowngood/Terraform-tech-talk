name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  tf_actions_working_dir: .terraform 
  STATEFILENAME: github-worker.tfstate
  STATE_RG_NAME: ${{ vars.STATE_RG_NAME }}
  STATE_SA_NAME: ${{ vars.STATE_SA_NAME }}
  TF_VAR_org_name: "2good4hisowngood"
  TF_VAR_image_name: ${{ vars.ACR_IMAGE }}
  TF_VAR_acr_server: ${{ vars.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
  TF_VAR_acr_username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
  TF_VAR_acr_password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
  TF_VAR_acr_rg: ${{ vars.STATE_RG_NAME }}
  TF_VAR_token: ${{ secrets.RUNNER_TOKEN }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true      
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ./.terraform
        
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

    - name: Generate Terraform docs
      uses: terraform-docs/gh-actions@v1.2.0
      with:
        working-dir: ${{ env.tf_actions_working_dir }}
        output-file: README.md
        output-method: inject
        git-push: "false"

    - name: Install Graphviz
      run: sudo apt-get update && sudo apt-get install -y graphviz

    - name: Generate Terraform graph
      run: terraform graph | dot -Tsvg > graph.svg

    - name: Upload Terraform graph
      uses: actions/upload-artifact@v2
      with:
        name: tf-graph
        path: graph.svg

    - name: Create Graph Output
      id: tf-graph-string
      run: |
        echo "## Terraform Graph Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '![Terraform Graph](graph.svg)' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT

    - name: Push Terraform Graph to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v6
      env:
        GRAPH_SUMMARY: "${{ steps.tf-graph-string.outputs.summary }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const body = `${process.env.GRAPH_SUMMARY}`;
          github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
          })
                
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ./.terraform

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan